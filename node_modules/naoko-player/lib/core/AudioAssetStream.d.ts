/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import { ITrack } from "../provider/Provider";
import internal from "node:stream";
import fs from 'fs';
import MusicManager from "./MusicManager";
declare class AudioAssetStream extends internal.PassThrough {
    readonly id: string;
    readonly metadata: ITrack;
    static cache_directory: string;
    static createAssetId(track: ITrack): string;
    static createAssetStream(track: ITrack): AudioAssetStream;
    bytesSent: number;
    cachedSeconds: number;
    audioStream: fs.ReadStream | internal.Readable;
    writers: Set<fs.WriteStream>;
    private _cachedaudio;
    constructor(id: string, metadata: ITrack);
    startAudioCache(): boolean;
    get isAudioCached(): boolean;
    getAssetStream(): fs.ReadStream;
    downloadAssetStream(manager: MusicManager): Promise<internal.Readable>;
    _transform(chunk: Buffer, encoding: BufferEncoding, callback: internal.TransformCallback): void;
}
export = AudioAssetStream;
