"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Provider = void 0;
const typebox_1 = require("@sinclair/typebox");
const node_path_1 = __importDefault(require("node:path"));
const fs = require("node:fs");
const TypeboxTrack = typebox_1.Type.Object({
    name: typebox_1.Type.String(),
    provider: typebox_1.Type.String(),
    encodedId: typebox_1.Type.String(),
    description: typebox_1.Type.String(),
    authorName: typebox_1.Type.String(),
    authorURL: typebox_1.Type.String(),
    sourceURL: typebox_1.Type.String()
});
const TypeboxPlaylist = typebox_1.Type.Object({
    name: typebox_1.Type.String(),
    provider: typebox_1.Type.String(),
    description: typebox_1.Type.String(),
    authorName: typebox_1.Type.String(),
    authorURL: typebox_1.Type.String(),
    sourceURL: typebox_1.Type.String(),
    tracks: typebox_1.Type.Array(TypeboxTrack)
});
class Provider {
    constructor(provider) {
        this.provider = provider;
        // Provider.registered.set(this.provider, this);
    }
    ;
    static assignAssetId(provider, track) {
        const id = Buffer.from(`Asset:${provider}=${track.sourceURL}`).toString('base64url');
        track.encodedId = id;
        Provider.cache.set(id, track);
        return id;
    }
    static checkIfCached(id) {
        return fs.existsSync(node_path_1.default.join(this.cache_path, id));
    }
    static getCacheStream(id) {
        if (!fs.existsSync(this.cache_path))
            fs.mkdirSync(this.cache_path, { recursive: true });
        return fs.createReadStream(node_path_1.default.join(this.cache_path, id));
    }
    static createCacheStream(id) {
        if (!fs.existsSync(this.cache_path))
            fs.mkdirSync(this.cache_path, { recursive: true });
        return fs.createWriteStream(node_path_1.default.join(this.cache_path, id));
    }
}
exports.Provider = Provider;
Provider.cache = new Map();
Provider.cache_path = node_path_1.default.join(process.cwd(), 'sounds', 'cache');
